<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.shiyouge.mapper.PostMapper">
    <resultMap id="BaseResultMap" type="com.example.shiyouge.bean.Post">
        <id column="postId" property="postId"/>
        <result column="userIdOfPost" property="userIdOfPost"/>
        <result column="postContent" property="postContent"/>
        <result column="partitionOfPost" property="partitionOfPost"/>
        <result column="publishTime" property="publishTime"/>
        <result column="commentedTimes" property="commentedTimes"/>
        <result column="praiseTimes" property="praiseTimes"/>
        <result column="collectedTimes" property="collectedTimes"/>
        <result column="reportTimes" property="reportTimes"/>
        <result column="ifReported" property="ifReported"/>
    </resultMap>

    <select id="getTheAllPostOfPartition" resultMap="BaseResultMap">
        select * from post where partitionOfPost = #{partitionOfPost} order by publishTime desc
    </select>

    <select id="getThePostsByContent" resultMap="BaseResultMap">
        select * from post where postContent like CONCAT(CONCAT('%', #{content}, '%'))
    </select>

    <select id="getThePostByPostId" resultMap="BaseResultMap">
        select * from post where postId = #{postId}
    </select>

    <update id="setThePostIfReported">
        update post set ifReported = #{status} where postId = #{postId}
    </update>

    <select id="getTheReportTimes" resultType="int">
        select reportTimes from post where postId = #{postId}
    </select>

    <update id="setTheReportTimes">
        update post set reportTimes = #{times} where postId = #{postId}
    </update>

    <select id="getTheReportTypes" resultType="java.lang.String">
        select reportedType from post where postId = #{postId}
    </select>

    <update id="setTheReportTypes">
        update post set reportedType = #{types} where postId = #{postId}
    </update>

    <insert id="createThePost">
        insert into post(userIdOfPost, postContent, partitionOfPost, publishTime)
        value(#{userId}, #{content}, #{partition}, #{createTime})
    </insert>

    <delete id="deletePostByPostId" parameterType="int">
        delete from post where postId = #{postId}
    </delete>

    <update id="reportedCancel">
        update post set ifReported = 0 where postId = #{postId}
    </update>

    <select id="getAllThePosts" resultMap="BaseResultMap">
        select * from post
    </select>

    <select id="getThePublishTimeOfPost" resultType="java.sql.Timestamp">
        select publishTime from post where postId = #{postId}
    </select>

    <select id="getTheCommentTimesByPostId" resultType="int">
        select commentedTimes from post where postId = #{postId}
    </select>

    <update id="setTheCommentTimesByPostId">
        update post set commentedTimes = #{times} where postId = #{postId}
    </update>

    <select id="getTheCollectedTimesByPostId" resultType="int">
        select collectedTimes from post where postId = #{postId}
    </select>

    <update id="setTheCollectedTimesByPostId">
        update post set collectedTimes = #{times} where postId = #{postId}
    </update>
</mapper>